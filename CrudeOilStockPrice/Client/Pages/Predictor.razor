@page "/predictor"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRunTime
@using CrudeOilStockPrice.Shared
@using System.Text.Json
@using System.Globalization

<h2>Crude Oil Stock Price, Predictor</h2>
<hr />
<p>
    An illustrative example of interface and consumption of a model created with Microsoft.ML.
    Dataset Source: Crude Oil Stock Price From 01-Jan-2000 to 27-July-2020
    <a href="https://www.kaggle.com/awadhi123/crude-oil-stock-price">»»</a>
</p>
<br />
<h4>Plot of results</h4>
<div style="height:300px;" id="container">
    <canvas id="canvas-1"></canvas>
</div>
<h4>Data Analisys</h4>
<div>
    @if (data == null) {
        <h5>Loading...</h5>
    }
    else {
        <table class="table table-sm" style="font-family:'Calibri'">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>High</th>
                    <th>Low</th>
                    <th>Close</th>
                    <th>Prediction</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="data" Context="i">
                    <tr>
                        <td>@i.Date</td>
                        <td>@i.High.ToString("N2")</td>
                        <td>@i.Low.ToString("N2")</td>
                        <td>@i.Close.ToString("N2")</td>
                        <td>@i.Score.ToString("N2")</td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    }
</div>
<br />
<div>
    @if (averageMetrics == null) {
        <h5>Loading...</h5>
    }
    else {
        <table>
            <tr>
                <td valign="top">
                    <h6>Average metrics of regression</h6>
                    <table class="table table-sm" style="font-family:'Calibri';">
                        <tr>
                            <td class="td-inf">Mean Absolute Error</td>
                            <td>@averageMetrics.MeanAbsoluteError.ToString("N4")</td>
                        </tr>
                        <tr>
                            <td class="td-inf">Mean Squared Error</td>
                            <td>@averageMetrics.MeanSquaredError.ToString("N4")</td>
                        </tr>
                        <tr>
                            <td class="td-inf">Root Mean Squared Error</td>
                            <td>@averageMetrics.RootMeanSquaredError.ToString("N4")</td>
                        </tr>
                        <tr>
                            <td class="td-inf">Loss Function</td>
                            <td>@averageMetrics.LossFunction.ToString("N4")</td>
                        </tr>
                        <tr>
                            <td class="td-inf">R-Squared</td>
                            <td>@averageMetrics.RSquared.ToString("N4")</td>
                        </tr>
                    </table>
                </td>
                <td style="width:20px;">
                </td>
                <td valign="top">
                    <h6>User Prediction</h6>
                    <table class="table table-sm" style="font-family:'Calibri';">
                        <tr>
                            <td class="td-inf">Input Date</td>
                            <td>
                                <input value="@date" />
                            </td>
                        </tr>
                        <tr>
                            <td class="td-inf">Prediction</td>
                            <td style="color: rgb(33,199,90)">$ @score.ToString("N2")</td>
                        </tr>
                        <tr>
                            <td class="td-inf">Status</td>
                            <td style="color:slategray">@prompt</td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    }
</div>

@code {
    List<StockPricePrediction> data;

    AverageMetrics averageMetrics;

    IJSObjectReference module;

    bool disableCommand;

    float score;
    string date = "2020-03-23";
    string prompt = "Press enter to calculate.";

    protected override async Task OnInitializedAsync()
    {
        await GetModule();
        await DrawChart();
        await GetMetrics();
    }

    async Task GetModule()
    {
        var jsSource = $"./jsModules/CrudeOilStockPrice.js?v={DateTime.Now.Ticks}";
        module = await _jsRunTime.InvokeAsync<IJSObjectReference>("import", jsSource);
    }

    async Task DrawChart()
    {
        var q = await _httpClient.GetFromJsonAsync<List<StockPricePrediction>>("api/StockPrice/GetPredictions");

        var labels = q.Select(x => x.Date).ToList();
        var dataSet1 = q.Select(x => x.Close).ToList();
        var dataSet2 = q.Select(x => x.Score).ToList();

        await module.InvokeVoidAsync("DrawChart", "canvas-1", labels, dataSet1, dataSet2);

        // populate table
        data = q;
    }

    async Task GetMetrics()
    {
        averageMetrics = await _httpClient.GetFromJsonAsync<AverageMetrics>("api/StockPrice/GetMetrics");
    }

    async Task GetPrediction()
    {
        // short validation
        if (DateTime.TryParseExact(date, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dateValue) == false) {
            prompt = "Invalid input, use yyyy-mm-dd";
            return;
        }

        disableCommand = true;
        prompt = "Processing...";
        try {
            var response = await _httpClient.PostAsJsonAsync<StockPrice>("api/ml/prediction", new StockPrice { Date = date });
            var json = await response.Content.ReadAsStringAsync();
            var predictionData = JsonSerializer.Deserialize<StockPricePrediction>(json);
            score = predictionData != null ? predictionData.Score : 0;
        }
        catch (Exception e) {
            Console.WriteLine("Exception in GetPrediction:\n{0}", e.Message);
        }
        await Task.Delay(1000);
        disableCommand = false;
        prompt = "Press enter to calculate.";
    }

}
