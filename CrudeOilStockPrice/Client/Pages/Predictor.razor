@page "/predictor"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRunTime
@using CrudeOilStockPrice.Shared
@using System.Text.Json

<h1>Crude Oil Stock Price 2000, Predictor</h1>
<hr />
<div>
    <canvas id="canvas-1" width="600" height="300"></canvas>
</div>
<h4>Data Analisys</h4>
<div>
    @if (correlate == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table table-sm" style="font-family:'Calibri';">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Price</th>
                    <th>Prediction</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var i in correlate)
                {
                    <tr>
                        <td>@i.Date.ToShortDateString()</td>
                        <td>$ @i.Price.ToString("N2")</td>
                        <td>$ @i.PredictedPrice.ToString("N2")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<br />
<div>
    <table cellpadding="4">
        <tr>
             <td valign="top">
                <h6>Metrics for Regression model</h6>
                <table class="table table-sm" style="font-family:'Calibri';">
                    <tr>
                        <td class="td-inf">Average L1 Loss</td>
                        <td>12.1233</td>
                    </tr>
                    <tr>
                        <td class="td-inf">Average L2 Loss</td>
                        <td>12.1233</td>
                    </tr>
                    <tr>
                        <td class="td-inf">Average RMS</td>
                        <td>12.1233</td>
                    </tr>
                    <tr>
                        <td class="td-inf">Average Loss Function</td>
                        <td>12.1233</td>
                    </tr>
                    <tr>
                        <td class="td-inf">Average R-squared</td>
                        <td>12.1233</td>
                    </tr>
                </table>
            </td>
            <td valign="top">
                <h6>User Prediction</h6>
                <table class="table table-sm" style="font-family:'Calibri';">
                    <tr>
                        <td class="td-inf">Input Date</td>
                        <td>
                            <input value="2000-03-22" />
                        </td>
                    </tr>
                    <tr>
                        <td class="td-inf">Prediction</td>
                        <td style="color: rgb(33,199,90)">$140.23</td>
                    </tr>
                    <tr>
                        <td class="td-inf">Status</td>
                        <td style="color:slategray">Press enter to calculate.</td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</div>

@code {
    List<StockPriceCorrelate> data;

    IJSObjectReference module;

    List<StockPriceCorrelate> correlate;

    bool disableCommand;

    float score;

    protected override async Task OnInitializedAsync()
    {
        await GetModule();
        await DrawChart();
    }

    async Task GetModule()
    {
        var jsSource = $"./jsModules/CrudeOilStockPrice.js?v={DateTime.Now.Ticks}";
        module = await _jsRunTime.InvokeAsync<IJSObjectReference>("import", jsSource);
    }

    async Task DrawChart()
    {
        var q = await _httpClient.GetFromJsonAsync<List<StockPriceCorrelate>>("api/StockPrice/GetCorrelate");

        var labels = q.Select(x => FormatDate(x.Date)).ToList();
        var dataSet1 = q.Select(x => x.Price).ToList();
        var dataSet2 = q.Select(x => x.PredictedPrice).ToList();

        await module.InvokeVoidAsync("DrawChart", "canvas-1", labels, dataSet1, dataSet2);

        // populate table
        correlate = q;
    }

    string FormatDate(DateTime date) => date.ToString("dd-MMM-yyyy").Replace(".", "");

    async Task GetPrediction()
    {
        disableCommand = true;
        try
        {
            //var response = await _httpClient.PostAsJsonAsync<StockPrice>("api/ml/prediction", new StockPrice { Date = "" });
            //var json = await response.Content.ReadAsStringAsync();
            //var predictionData = JsonSerializer.Deserialize<StockPricePrediction>(json);
            //score = predictionData != null ? predictionData.Score : 0;
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception in GetPrediction:\n{0}", e.Message);
        }
        await Task.Delay(2000);
        disableCommand = false;
    }

}
