
namespace ConsoleMLApp { class Program  { ...
---------------------------------------------
#region TEM
class StockPriceCorrelate
{
    public DateTime Date { get; set; }
    public float Price { get; set; }
    public float PredictedPrice { get; set; }
}
private static void CreatePredictionsTable_1(MLContext mlContext, IDataView dataView, ITransformer model)
{
    var predictionEngine = mlContext.Model.CreatePredictionEngine<StockPrice, StockPricePrediction>(model);

    var sp = new StockPrice();
    var dates = dataView.Preview().ColumnView[0];
    var prices = dataView.Preview().ColumnView[5];

    var ls = new List<StockPriceCorrelate>();

    for (int i = 0; i < dates.Values.Length; i++) {
        sp.Date = dates.Values[i].ToString();
        sp.Price = float.Parse(prices.Values[i].ToString());
        float p = predictionEngine.Predict(sp).Score;
        WriteLine($"{sp.Date}\t{sp.Price:N2}\t{p:N2}");

        ls.Add(new StockPriceCorrelate
        {
            Date = DateTime.ParseExact(sp.Date, "yyyy-MM-dd", CultureInfo.InvariantCulture),
            Price = sp.Price,
            PredictedPrice = p
        });
    }

    // save a json file
    Utils.SaveJsonFile(DATA_PATH + "StockPricePlot.json", ls, true);
}
#endregion

---------------------------------------------

Razor Page
string FormatDate(DateTime date) => date.ToString("dd-MMM-yyyy").Replace(".", "");


VALIDATE 
string date = "2021-12-23";
if (DateTime.TryParseExact(date, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dateValue)) {
    //Parsed Successfully   
}


SQL
USE [CrudeOilPrice]
SELECT TOP(200) Date FROM [PriceHistory] ORDER BY Date DESC